Index: Conception/Sprint_3/Sequ_generation_diagramme.puml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@startuml\r\n'https://plantuml.com/sequence-diagram\r\n\r\nautonumber\r\n\r\nAlice -> Bob: Authentication Request\r\nBob --> Alice: Authentication Response\r\n\r\nAlice -> Bob: Another authentication Request\r\nAlice <-- Bob: another authentication Response\r\n@enduml
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Conception/Sprint_3/Sequ_generation_diagramme.puml b/Conception/Sprint_3/Sequ_generation_diagramme.puml
--- a/Conception/Sprint_3/Sequ_generation_diagramme.puml	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
+++ b/Conception/Sprint_3/Sequ_generation_diagramme.puml	(date 1672993859647)
@@ -1,11 +1,55 @@
 @startuml
 'https://plantuml.com/sequence-diagram
 
-autonumber
+participant main
+participant "modele : Modele" as modele
+participant "maxY: int" as maxy
+participant "X: int" as x
+participant "Y: int" as y
+participant "c: Instance" as c
+participant "pane : Pane" as pane
+participant "vue: vueClasse" as vue
+
+main->modele : genererGraphe()
+activate modele
+
+modele->maxy : maxy=0
+modele->x : x=0
+modele->y : y=0
+
+loop Classe c : this.classeInit
+modele->c : placer(X,Y)
+activate c
+c-->modele
+deactivate c
+
+modele->c : getImage()
+activate c
+c --> modele : vue
+deactivate c
+
+modele->pane : getChildren.add(vue)
+activate pane
+pane --> modele
+deactivate pane
+
+modele->vue : getWidth()
+activate vue
+vue-->modele : width
+deactivate vue
 
-Alice -> Bob: Authentication Request
-Bob --> Alice: Authentication Response
+modele -> x : x = x + witdh + 50
 
-Alice -> Bob: Another authentication Request
-Alice <-- Bob: another authentication Response
+modele->vue : getHeight()
+activate vue
+vue-->modele : height
+deactivate vue
+
+
+alt maxy < height
+modele->maxy : maxy=height
+end
+
+end
+
 @enduml
\ No newline at end of file
Index: src/main/java/Representation/Modele.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Representation;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Field;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class Modele {\r\n    private File repertoire;\r\n    private List<Instance> classeInit;\r\n    private List<Relation> relation;\r\n\r\n\r\n    /**\r\n     * Constructeur\r\n     *\r\n     * @param source chemin du repertoire selectionné\r\n     *               <p>\r\n     *               Le constructeur vérifie la nature de l'instance et l'ajoute dans\r\n     *               classeinit,les instances ne figurant pas dans le repertoire\r\n     *               mais qui sont utlisé sont ajouter dans classeCacher\r\n     *               classeRajouter sera initialisé à 0;\r\n     */\r\n    public Modele(String source) throws ClassNotFoundException, IOException {\r\n        this.repertoire = new File(source);\r\n        this.classeInit = new ArrayList<Instance>();\r\n        this.relation = new ArrayList<Relation>();\r\n        this.creationInstance(source);\r\n        this.creationRelation();\r\n    }\r\n\r\n    /**\r\n     * Methode privé creant les instances et les ajoutants à classeInit\r\n     */\r\n    private void creationInstance(String chemin) throws ClassNotFoundException, IOException {\r\n        File f = new File(chemin);\r\n        File[] list = f.listFiles();\r\n        Class c = null;\r\n        try {\r\n            //On verifie si c'est un dossier avec des fichiers dedant\r\n            if (list != null) {\r\n                //parcours des fichier du repertoire\r\n                for (File fils : list) {\r\n                    //Si cest un dossier on appelle la methode sur le chemin absolue du fils\r\n                    this.creationInstance(fils.getAbsolutePath());\r\n                }\r\n                //Quand cest un fichier on verifie que cest bien un .class et on appelle la fonction chargementInstance\r\n            } else if (f.getName().endsWith(\".class\")) {\r\n                this.chargementInstance(new Loaders().loadFromFile(f));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n        /**\r\n         * Methode permettant d'enregistrer les differentes relations\r\n         */\r\n        private void creationRelation () {\r\n            for (Instance classe : this.classeInit) {\r\n                List<Composante> comp = classe.getAttributs();\r\n                for (Composante composante : comp) {\r\n                    String nom = composante.getType();\r\n                    for (Instance classe1 : this.classeInit) {\r\n                        String nomClasse = classe1.getNom();\r\n                        System.out.println(\"debug:\"+nom+\" p n// \"+nomClasse);\r\n                        if (nomClasse == nom) {\r\n                            String typeAtt = composante.getType();\r\n                            System.out.println(\"debug:\"+typeAtt);\r\n                            if (typeAtt.contains(\"List\") || typeAtt.contains(\"[]\")) {\r\n                                Relation r = new Association(classe.getNom(), typeAtt, \"1\", \"*\", composante.getNom());\r\n                                this.ajouterRelation(r);\r\n                            } else {\r\n                                Relation r = new Association(classe.getNom(), typeAtt, \"1\", \"1\", composante.getNom());\r\n                                this.ajouterRelation(r);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * ajoute une instance a l'attibut classeInit\r\n         *\r\n         * @param i l'instance a ajouté\r\n         */\r\n        public void ajouterInstance (Instance i){\r\n            this.classeInit.add(i);\r\n        }\r\n\r\n        public void ajouterRelation (Relation r){\r\n            this.relation.add(r);\r\n        }\r\n\r\n        public List<Relation> getRelationSource (String name){\r\n            List res = new ArrayList<Relation>();\r\n            for (Relation r : this.relation) {\r\n                if (r.classeSrc == name) {\r\n                    res.add(r);\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n\r\n        public String toString () {\r\n            String res = \"\";\r\n            for (Instance i : this.classeInit) {\r\n                res += i.toString() + \"\\n\";\r\n                for (Relation r : this.getRelationSource(i.getNom())) {\r\n                    res += r.toString();\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n\r\n        /**\r\n         * Methode permettant d'ajouter differentes relations dans le modele\r\n         */\r\n        public void chargementInstance(Class c){\r\n            Instance i = null;\r\n            if (c.isInterface()) {\r\n                i = new Interface(c);\r\n            } else {\r\n                i = new Classe(c);\r\n            }\r\n            this.ajouterInstance(i);\r\n\r\n            //gestion des relation propre a la classe courante\r\n            //pour l'heritage\r\n            Class sup = c.getSuperclass();\r\n            if (sup != null) {\r\n                this.ajouterRelation(new Heritage(c.getName(), sup.getName()));\r\n            }\r\n            //pour l'implementation\r\n            Class[] imp = c.getInterfaces();\r\n            for (Class ced : imp) {\r\n                this.ajouterRelation(new Implementation(c.getName(), ced.getName()));\r\n            }\r\n            //pour l'association\r\n            Field[] asso=c.getDeclaredFields();\r\n            for (Field f: asso) {\r\n                this.creationRelation();\r\n            }\r\n        }\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Representation/Modele.java b/src/main/java/Representation/Modele.java
--- a/src/main/java/Representation/Modele.java	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
+++ b/src/main/java/Representation/Modele.java	(date 1672994488098)
@@ -1,5 +1,11 @@
 package Representation;
 
+import javafx.beans.Observable;
+import javafx.scene.Node;
+import javafx.scene.layout.Pane;
+import javafx.scene.layout.VBox;
+
+import java.awt.*;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -7,10 +13,12 @@
 import java.util.List;
 
 
-public class Modele {
+public class Modele implements Sujet{
+    private Pane pane;
     private File repertoire;
     private List<Instance> classeInit;
     private List<Relation> relation;
+    private List<Observer> vue;
 
 
     /**
@@ -27,6 +35,19 @@
         this.repertoire = new File(source);
         this.classeInit = new ArrayList<Instance>();
         this.relation = new ArrayList<Relation>();
+        this.vue = new ArrayList<Observer>();
+        this.creationInstance(source);
+        this.creationRelation();
+        this.genererGraphe();
+    }
+
+
+    public Modele(String source, Pane p) throws ClassNotFoundException, IOException {
+        this.pane = p;
+        this.repertoire = new File(source);
+        this.classeInit = new ArrayList<Instance>();
+        this.relation = new ArrayList<Relation>();
+        this.vue = new ArrayList<Observer>();
         this.creationInstance(source);
         this.creationRelation();
     }
@@ -56,94 +77,168 @@
     }
 
 
-        /**
-         * Methode permettant d'enregistrer les differentes relations
-         */
-        private void creationRelation () {
-            for (Instance classe : this.classeInit) {
-                List<Composante> comp = classe.getAttributs();
-                for (Composante composante : comp) {
-                    String nom = composante.getType();
-                    for (Instance classe1 : this.classeInit) {
-                        String nomClasse = classe1.getNom();
-                        System.out.println("debug:"+nom+" p n// "+nomClasse);
-                        if (nomClasse == nom) {
-                            String typeAtt = composante.getType();
-                            System.out.println("debug:"+typeAtt);
-                            if (typeAtt.contains("List") || typeAtt.contains("[]")) {
-                                Relation r = new Association(classe.getNom(), typeAtt, "1", "*", composante.getNom());
-                                this.ajouterRelation(r);
-                            } else {
-                                Relation r = new Association(classe.getNom(), typeAtt, "1", "1", composante.getNom());
-                                this.ajouterRelation(r);
-                            }
-                        }
-                    }
-                }
-            }
-        }
+    /**
+     * Methode permettant d'enregistrer les differentes relations
+     */
+    private void creationRelation () {
+        for (Instance classe : this.classeInit) {
+            List<Composante> comp = classe.getAttributs();
+            for (Composante composante : comp) {
+                String nom = composante.getType();
+                for (Instance classe1 : this.classeInit) {
+                    String nomClasse = classe1.getNom();
+                    System.out.println("debug:"+nom+" p n// "+nomClasse);
+                    if (nomClasse == nom) {
+                        String typeAtt = composante.getType();
+                        System.out.println("debug:"+typeAtt);
+                        if (typeAtt.contains("List") || typeAtt.contains("[]")) {
+                            Relation r = new Association(classe.getNom(), typeAtt, "1", "*", composante.getNom());
+                            this.ajouterRelation(r);
+                        } else {
+                            Relation r = new Association(classe.getNom(), typeAtt, "1", "1", composante.getNom());
+                            this.ajouterRelation(r);
+                        }
+                    }
+                }
+            }
+        }
+    }
 
-        /**
-         * ajoute une instance a l'attibut classeInit
-         *
-         * @param i l'instance a ajouté
-         */
-        public void ajouterInstance (Instance i){
-            this.classeInit.add(i);
-        }
+    /**
+     * ajoute une instance a l'attibut classeInit
+     *
+     * @param i l'instance a ajouté
+     */
+    public void ajouterInstance (Instance i){
+        this.classeInit.add(i);
+    }
 
-        public void ajouterRelation (Relation r){
-            this.relation.add(r);
-        }
+    public void ajouterRelation (Relation r){
+        this.relation.add(r);
+    }
 
-        public List<Relation> getRelationSource (String name){
-            List res = new ArrayList<Relation>();
-            for (Relation r : this.relation) {
-                if (r.classeSrc == name) {
-                    res.add(r);
-                }
-            }
-            return res;
-        }
+    public List<Relation> getRelationSource (String name){
+        List res = new ArrayList<Relation>();
+        for (Relation r : this.relation) {
+            if (r.classeSrc == name) {
+                res.add(r);
+            }
+        }
+        return res;
+    }
 
-        public String toString () {
-            String res = "";
-            for (Instance i : this.classeInit) {
-                res += i.toString() + "\n";
-                for (Relation r : this.getRelationSource(i.getNom())) {
-                    res += r.toString();
-                }
-            }
-            return res;
-        }
+    public String toString () {
+        String res = "";
+        for (Instance i : this.classeInit) {
+            res += i.toString() + "\n";
+            for (Relation r : this.getRelationSource(i.getNom())) {
+                res += r.toString();
+            }
+        }
+        return res;
+    }
 
-        /**
-         * Methode permettant d'ajouter differentes relations dans le modele
-         */
-        public void chargementInstance(Class c){
-            Instance i = null;
-            if (c.isInterface()) {
-                i = new Interface(c);
-            } else {
-                i = new Classe(c);
-            }
-            this.ajouterInstance(i);
+    /**
+     * Methode permettant d'ajouter differentes relations dans le modele
+     */
+    public void chargementInstance(Class c){
+        Instance i = null;
+        if (c.isInterface()) {
+            i = new Interface(c);
+        } else {
+            i = new Classe(c);
+        }
+        this.ajouterInstance(i);
 
-            //gestion des relation propre a la classe courante
-            //pour l'heritage
-            Class sup = c.getSuperclass();
-            if (sup != null) {
-                this.ajouterRelation(new Heritage(c.getName(), sup.getName()));
-            }
-            //pour l'implementation
-            Class[] imp = c.getInterfaces();
-            for (Class ced : imp) {
-                this.ajouterRelation(new Implementation(c.getName(), ced.getName()));
-            }
-            //pour l'association
-            Field[] asso=c.getDeclaredFields();
-            for (Field f: asso) {
-                this.creationRelation();
-            }
-        }
-    }
+        //gestion des relation propre a la classe courante
+        //pour l'heritage
+        Class sup = c.getSuperclass();
+        if (sup != null) {
+            this.ajouterRelation(new Heritage(c.getName(), sup.getName()));
+        }
+        //pour l'implementation
+        Class[] imp = c.getInterfaces();
+        for (Class ced : imp) {
+            this.ajouterRelation(new Implementation(c.getName(), ced.getName()));
+        }
+        //pour l'association
+        Field[] asso=c.getDeclaredFields();
+        for (Field f: asso) {
+            this.creationRelation();
+        }
+    }
+
+    /**
+     * met a jour le modele (place les classes) et creer l'affichage de ces classes
+     */
+    public void genererGraphe(){
+        int maxy = 0;
+        int x = 0;
+        int y = 0;
+        for (Instance i : this.classeInit){
+            i.placerClasse(x,y);
+            Observer o = i.getImage();
+            this.ajouterObserver(o);
+            int width = (int)(((VBox)(o)).getWidth());
+            x+= width + 50;
+            int height = (int)(((VBox)(o)).getHeight());
+            if (maxy<height){
+                maxy = height;
+            }
+            Dimension dimension = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
+            int widthScreen  = (int)dimension.getWidth();
+            if (x+width>widthScreen){
+                y += y+maxy+50;
+                x = 0;
+            }
+            //this.genererRelation();
+        }
+    }
+
+    /**
+     * met a jour les relation
+     */
+    private void genererRelation(){
+        for (Instance i : this.classeInit){
+        }
+    }
+
+    /**
+     * calcule l'equation de la droite a partir de deux point
+     * @param x1
+     *      absisse du premier point
+     * @param y1
+     *      ordonnée du premier point
+     * @param x2
+     *      absisse du deuxieme point
+     * @param y2
+     *      ordonnée du deuxieme point
+     * @return
+     *      un tableau contenant les valeur de a et de b dans y = ax + b
+     */
+    public static double[] calculerEquation(int x1,int y1, int x2, int y2) {
+        if (x1 == x2) return null;
+        double a = (y2-y1) / (x2-x1);
+        double b = y1 - a * x1;
+        return new double[] { a, b };
+    }
+
+    @Override
+    public void ajouterObserver(Observer o) {
+        this.vue.add(o);
+        this.pane.getChildren().add((Node)(o));
+        //todo debug
+    }
+
+    @Override
+    public void supprimerObserver(Observer o) {
+        //TODO a faire
+    }
+
+    @Override
+    public void notifierObserver() {
+        for (Observer observer : this.vue){
+            observer.actualiser();
+        }
+    }
+}
Index: src/main/java/Representation/Observer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Representation;\r\n\r\nimport javafx.scene.Group;\r\n\r\npublic interface Observer{\r\n\r\n    public abstract void actualiser();\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Representation/Observer.java b/src/main/java/Representation/Observer.java
--- a/src/main/java/Representation/Observer.java	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
+++ b/src/main/java/Representation/Observer.java	(date 1672993859733)
@@ -1,9 +1,5 @@
 package Representation;
 
-import javafx.scene.Group;
-
-public interface Observer{
-
-    public abstract void actualiser();
+public interface Observer {
+    public void actualiser();
 }
-
Index: src/main/java/Representation/Instance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Representation;\r\n\r\nimport Vue.VueInstance;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic abstract class Instance extends Globale {\r\n\r\n    public List<Methode> methodes = new ArrayList<Methode>();\r\n    protected List<Attribut> attributs = new ArrayList<>();\r\n    /**\r\n     * on ne traitera plus les importations en gardera juste en memoire\r\n     * les differentes classe participantes.\r\n     */\r\n    protected List<Class<?>> imports;\r\n\r\n    public Instance(Class c) {\r\n        this.nom = c.getName();\r\n        this.modifier = c.getModifiers();\r\n        Field[] fields = c.getDeclaredFields();\r\n        for(int i = 0;fields.length > i;i++){\r\n            attributs.add(new Attribut(fields[i].getName(),fields[i].getType().getName()));\r\n        }\r\n        Method[] meths = c.getDeclaredMethods();\r\n        for(int i = 0;meths.length > i;i++){\r\n            methodes.add(new Methode(meths[i].getName(),meths[i].getReturnType().getName()));\r\n        }\r\n    }\r\n\r\n    public List<Attribut> getAttributs() {\r\n        return attributs;\r\n    }\r\n\r\n    public List<Methode> getMethodes() {\r\n        return methodes;\r\n    }\r\n\r\n    public abstract String getType();\r\n\r\n    public void ajouterAttribut(Attribut a){\r\n        attributs.add(a);\r\n    }\r\n\r\n    public void ajouterMethode(Methode m){\r\n        methodes.add(m);\r\n    }\r\n    @Override\r\n\r\n    public String toString(){\r\n        String resultat = \"\\nattributs:\"+\"\\n\";\r\n        for(Attribut c : this.attributs){\r\n            resultat +=c.getAcces()+\" \"+c.getType() + \"\\n\";\r\n        }\r\n        resultat+=\"-------------\\n\";\r\n        resultat += \"methodes: \\n\";\r\n        for(Methode c : this.methodes){\r\n            resultat +=c.toString() + \"\\n\";\r\n        }\r\n        resultat+=\"--------------\";\r\n        return resultat;\r\n    }\r\n\r\n    /**\r\n     * Methode renvoyant le nom sans les packages\r\n     * @return\r\n     */\r\n    public String getSimpleNom(){\r\n        String[] nom=this.nom.split(\".\");\r\n        return nom[nom.length-1];\r\n    }\r\n\r\n    public VueInstance getImage(){\r\n        return new VueInstance(this);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Representation/Instance.java b/src/main/java/Representation/Instance.java
--- a/src/main/java/Representation/Instance.java	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
+++ b/src/main/java/Representation/Instance.java	(date 1672993859739)
@@ -9,6 +9,8 @@
 
 public abstract class Instance extends Globale {
 
+    private int X;
+    private int Y;
     public List<Methode> methodes = new ArrayList<Methode>();
     protected List<Attribut> attributs = new ArrayList<>();
     /**
@@ -75,4 +77,9 @@
     public VueInstance getImage(){
         return new VueInstance(this);
     }
+
+    public void placerClasse(int x, int y){
+        this.X = x;
+        this.Y = y;
+    }
 }
Index: src/main/java/Vue/VueClasse.java
===================================================================
diff --git a/src/main/java/Vue/VueClasse.java b/src/main/java/Vue/VueClasse.java
deleted file mode 100644
--- a/src/main/java/Vue/VueClasse.java	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
+++ /dev/null	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
@@ -1,38 +0,0 @@
-package Vue;
-
-import Representation.Classe;
-import javafx.scene.control.TextArea;
-import javafx.scene.control.TextField;
-import javafx.scene.layout.StackPane;
-import javafx.scene.layout.VBox;
-import javafx.scene.paint.Color;
-import javafx.scene.paint.Paint;
-import javafx.scene.shape.Rectangle;
-import javafx.scene.control.Label;
-import javafx.scene.text.Text;
-
-import java.lang.reflect.Method;
-
-public class VueClasse extends VBox {
-    private Rectangle en_tete;
-    private Rectangle attribut;
-    private Rectangle methode;
-
-    public VueClasse(Classe c){
-        String n = c.getNom();
-        Label l = new Label(n+"\n dfsqfsdf");
-        l.getLayoutX();
-        double height =  (int) (l.getHeight())+ 20;
-        double width = (int)(l.getWidth())+10;
-        this.en_tete = new Rectangle(width,height);
-        this.en_tete.setFill(Color.WHITE);
-        this.en_tete.setStroke(Color.BLACK);
-        this.en_tete.setAccessibleText("bkjfdwncbnw,dnbwkdjxc,v ;,wdnx");
-        StackPane sp = new StackPane();
-        sp.getChildren().addAll(this.en_tete,l);
-
-        this.getChildren().add(sp);
-    }
-
-
-}
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example.demo {\r\n    requires junit;\r\n    requires javafx.graphics;\r\n    requires javafx.controls;\r\n\r\n    exports Representation;\r\n    exports Vue;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 42153e56271f97093fe1a3249dfbaa6c7b3a4ec3)
+++ b/src/main/java/module-info.java	(date 1672993859785)
@@ -2,6 +2,7 @@
     requires junit;
     requires javafx.graphics;
     requires javafx.controls;
+    requires java.desktop;
 
     exports Representation;
     exports Vue;
Index: src/main/java/Representation/Sujet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Representation/Sujet.java b/src/main/java/Representation/Sujet.java
new file mode 100644
--- /dev/null	(date 1672993859833)
+++ b/src/main/java/Representation/Sujet.java	(date 1672993859833)
@@ -0,0 +1,8 @@
+package Representation;
+
+public interface Sujet {
+
+    public void ajouterObserver(Observer o);
+    public void supprimerObserver(Observer o);
+    public void notifierObserver();
+}
Index: src/main/java/Vue/ApplicationMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Vue/ApplicationMain.java b/src/main/java/Vue/ApplicationMain.java
new file mode 100644
--- /dev/null	(date 1672994488088)
+++ b/src/main/java/Vue/ApplicationMain.java	(date 1672994488088)
@@ -0,0 +1,29 @@
+package Vue;
+
+import Representation.Classe;
+import Representation.Loaders;
+import Representation.Modele;
+import javafx.application.Application;
+import javafx.scene.Scene;
+import javafx.scene.layout.Pane;
+import javafx.stage.Stage;
+
+import java.io.File;
+
+public class ApplicationMain extends Application{
+
+    @Override
+    public void start(Stage stage) throws Exception {
+
+        Loaders l = new Loaders();
+        Pane p = new Pane();
+        Modele m = new Modele("E:\\Informatique\\Etude\\S3\\SAE\\SAE_Dev\\GENERATION-AUTOMATIQUE-DE-DIAGRAMME-DE-CLASSES\\demo\\target\\classes\\Representation",p);
+
+
+
+        Scene scene = new Scene(p);
+        stage.setTitle("Hello!");
+        stage.setScene(scene);
+        stage.show();
+    }
+}
